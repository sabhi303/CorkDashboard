# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestDefaultSuite():
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def test_homePage(self):
    # Test name: HomePage
    # Step # | name | target | value
    # 1 | open | / | 
    self.driver.get("http://localhost:3000/")
    # 2 | setWindowSize | 1364x766 | 
    self.driver.set_window_size(1364, 766)
    # 3 | click | id=hero-title__text--bottom | 
    self.driver.find_element(By.ID, "hero-title__text--bottom").click()
    # 4 | click | css=.next > .flickity-button-icon | 
    self.driver.find_element(By.CSS_SELECTOR, ".next > .flickity-button-icon").click()
    # 5 | click | css=.previous | 
    self.driver.find_element(By.CSS_SELECTOR, ".previous").click()
    # 6 | click | id=hero-grid | 
    self.driver.find_element(By.ID, "hero-grid").click()
    # 7 | click | css=#hero-weather__symbol > img | 
    self.driver.find_element(By.CSS_SELECTOR, "#hero-weather__symbol > img").click()
    # 8 | click | css=.menu-button__bar--bottom | 
    self.driver.find_element(By.CSS_SELECTOR, ".menu-button__bar--bottom").click()
    # 9 | click | css=.s-m__trigger > .menu-button | 
    self.driver.find_element(By.CSS_SELECTOR, ".s-m__trigger > .menu-button").click()
    # 10 | click | css=a > .float-right | 
    self.driver.find_element(By.CSS_SELECTOR, "a > .float-right").click()
  
  def test_homePageMap(self):
    # Test name: HomePageMap
    # Step # | name | target | value
    # 1 | open | / | 
    self.driver.get("http://localhost:3000/")
    # 2 | setWindowSize | 1364x766 | 
    self.driver.set_window_size(1364, 766)
    # 3 | click | css=#cork_county > path | 
    self.driver.find_element(By.CSS_SELECTOR, "#cork_county > path").click()
    # 4 | runScript | window.scrollTo(0,1300) | 
    self.driver.execute_script("window.scrollTo(0,1300)")
    # 5 | click | css=#cork_city > path | 
    self.driver.find_element(By.CSS_SELECTOR, "#cork_city > path").click()
    # 6 | click | css=#cork_county > path | 
    self.driver.find_element(By.CSS_SELECTOR, "#cork_county > path").click()
  
  def test_portal(self):
    # Test name: Portal
    # Step # | name | target | value
    # 1 | open | / | 
    self.driver.get("http://localhost:3000/")
    # 2 | setWindowSize | 1364x766 | 
    self.driver.set_window_size(1364, 766)
    # 3 | click | css=a > .float-right | 
    self.driver.find_element(By.CSS_SELECTOR, "a > .float-right").click()
  
  def test_queriesGeoDemos(self):
    # Test name: QueriesGeoDemos
    # Step # | name | target | value
    # 1 | open | / | 
    self.driver.get("http://localhost:3000/")
    # 2 | setWindowSize | 1364x766 | 
    self.driver.set_window_size(1364, 766)
    # 3 | click | linkText=QUERIES | 
    self.driver.find_element(By.LINK_TEXT, "QUERIES").click()
    # 4 | click | linkText=Launch Geodemographics | 
    self.driver.find_element(By.LINK_TEXT, "Launch Geodemographics").click()
  
  def test_queriesLiveTravel(self):
    # Test name: QueriesLiveTravel
    # Step # | name | target | value
    # 1 | open | / | 
    self.driver.get("http://localhost:3000/")
    # 2 | setWindowSize | 1364x766 | 
    self.driver.set_window_size(1364, 766)
    # 3 | click | linkText=QUERIES | 
    self.driver.find_element(By.LINK_TEXT, "QUERIES").click()
    # 4 | click | linkText=Launch Live Travel | 
    self.driver.find_element(By.LINK_TEXT, "Launch Live Travel").click()
    # 5 | click | css=.leaflet-marker-icon:nth-child(7) | 
    self.driver.find_element(By.CSS_SELECTOR, ".leaflet-marker-icon:nth-child(7)").click()
  
  def test_themes(self):
    # Test name: Themes
    # Step # | name | target | value
    # 1 | open | / | 
    self.driver.get("http://localhost:3000/")
    # 2 | setWindowSize | 1364x766 | 
    self.driver.set_window_size(1364, 766)
    # 3 | click | linkText=THEMES | 
    self.driver.find_element(By.LINK_TEXT, "THEMES").click()
    # 4 | click | css=.subnav__icon-nav:nth-child(1) h2 | 
    self.driver.find_element(By.CSS_SELECTOR, ".subnav__icon-nav:nth-child(1) h2").click()
    # 5 | click | css=.subnav__icon-nav:nth-child(3) h2 | 
    self.driver.find_element(By.CSS_SELECTOR, ".subnav__icon-nav:nth-child(3) h2").click()
    # 6 | click | css=.subnav__icon-nav:nth-child(4) use | 
    self.driver.find_element(By.CSS_SELECTOR, ".subnav__icon-nav:nth-child(4) use").click()
    # 7 | click | css=.subnav__icon-nav:nth-child(5) use | 
    self.driver.find_element(By.CSS_SELECTOR, ".subnav__icon-nav:nth-child(5) use").click()
  
  def test_tools(self):
    # Test name: Tools
    # Step # | name | target | value
    # 1 | open | / | 
    self.driver.get("http://localhost:3000/")
    # 2 | setWindowSize | 1364x766 | 
    self.driver.set_window_size(1364, 766)
    # 3 | click | linkText=TOOLS | 
    self.driver.find_element(By.LINK_TEXT, "TOOLS").click()
  
